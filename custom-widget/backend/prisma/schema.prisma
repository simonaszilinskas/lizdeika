generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agent_status {
  id         String          @id
  user_id    String          @unique
  status     AgentStatusEnum @default(offline)
  updated_at DateTime
  users      users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model messages {
  id                 String              @id
  ticket_id          String
  sender_id          String?
  senderType         SenderType
  content            String
  message_type       MessageType         @default(text)
  metadata           Json?               // For file attachments: {filename, path, mimetype, size, url}
  created_at         DateTime            @default(now())
  users              users?              @relation(fields: [sender_id], references: [id])
  tickets            tickets             @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  message_statistics message_statistics?

  @@index([created_at])
  @@index([senderType])
  @@index([ticket_id, created_at])
  @@index([ticket_id])
}

model refresh_tokens {
  id         String   @id
  user_id    String
  token      String   @unique
  expires_at DateTime
  is_revoked Boolean  @default(false)
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}


model system_logs {
  id         String   @id
  action     String
  details    Json?
  created_at DateTime @default(now())

  @@index([created_at])
}

model system_settings {
  id            String   @id @default(cuid())
  setting_key   String   @unique
  setting_value String?
  setting_type  String   @default("string")
  description   String?
  category      String   @default("general")
  is_public     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  updated_by    String?

  @@index([category])
  @@index([is_public])
  @@index([setting_key, category])
}

model application_logs {
  id             String   @id @default(cuid())
  timestamp      DateTime @default(now())
  level          String
  correlation_id String?
  service        String   @default("vilnius-assistant-backend")
  module         String?
  message        String
  user_id        String?
  metadata       Json?
  stack          String?
  created_at     DateTime @default(now())

  @@index([timestamp])
  @@index([level])
  @@index([correlation_id])
  @@index([user_id])
  @@index([module])
  @@index([level, timestamp(sort: Desc)])
}

model user_activities {
  id          String           @id
  user_id     String?
  action_type UserActivityType
  action      String
  resource    String?
  resource_id String?
  ip_address  String?
  user_agent  String?
  details     Json?
  success     Boolean          @default(true)
  created_at  DateTime         @default(now())
  users       users?           @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action_type])
  @@index([created_at])
  @@index([success])
}

model ticket_actions {
  id             String     @id
  ticket_id      String
  performed_by   String
  action         ActionType
  previous_value String?
  new_value      String?
  reason         String?
  created_at     DateTime   @default(now())
  users          users      @relation(fields: [performed_by], references: [id])
  tickets        tickets    @relation(fields: [ticket_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([ticket_id])
}

model ticket_categories {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("#6B7280")
  created_by  String
  is_archived Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  updated_by  String?

  creator users    @relation("CategoryCreator", fields: [created_by], references: [id])
  updater users?   @relation("CategoryUpdater", fields: [updated_by], references: [id])
  tickets tickets[]

  @@index([is_archived], name: "archived_lookup")
  @@index([created_by], name: "creator_lookup")
  @@index([name], name: "name_search")
}

model tickets {
  id                                     String               @id
  ticket_number                          String               @unique
  user_id                                String?
  assigned_agent_id                      String?
  user_number                            Int?                 @unique
  priority                               TicketPriority       @default(medium)
  category                               String?              // Legacy field - will be removed after migration
  category_id                            String?              // New FK to ticket_categories
  category_metadata                      Json?                // Stores AI categorization info (source, confidence, reasoning)
  manual_category_override               Boolean              @default(false) // Prevents AI from overriding manual selection
  subject                                String
  description                            String?
  source                                 TicketSource         @default(widget)
  archived                               Boolean              @default(false)
  created_at                             DateTime             @default(now())
  updated_at                             DateTime
  messages                               messages[]
  message_statistics                     message_statistics[]
  ticket_actions                         ticket_actions[]
  ticket_category                        ticket_categories?   @relation(fields: [category_id], references: [id], onDelete: SetNull)
  users_tickets_assigned_agent_idTousers users?               @relation("tickets_assigned_agent_idTousers", fields: [assigned_agent_id], references: [id])
  users_tickets_user_idTousers           users?               @relation("tickets_user_idTousers", fields: [user_id], references: [id])

  @@index([assigned_agent_id])
  @@index([created_at])
  @@index([archived])
  @@index([category_id])
  @@index([manual_category_override])
}

model users {
  id                                       String                @id
  email                                    String                @unique
  password_hash                            String
  first_name                               String
  last_name                                String
  role                                     UserRole              @default(user)
  is_active                                Boolean               @default(true)
  email_verified                           Boolean               @default(false)
  last_login                               DateTime?
  created_at                               DateTime              @default(now())
  updated_at                               DateTime
  user_number                              Int?                  @unique
  totp_enabled                             Boolean               @default(false)
  totp_secret                              String?
  totp_confirmed_at                        DateTime?
  totp_failed_attempts                     Int                   @default(0)
  totp_lock_until                          DateTime?
  backup_codes                             Json?
  agent_status                             agent_status?
  messages                                 messages[]
  message_statistics                       message_statistics[]
  refresh_tokens                           refresh_tokens[]
  ticket_actions                           ticket_actions[]
  tickets_tickets_assigned_agent_idTousers tickets[]             @relation("tickets_assigned_agent_idTousers")
  tickets_tickets_user_idTousers           tickets[]             @relation("tickets_user_idTousers")
  user_activities                          user_activities[]
  created_categories                       ticket_categories[]   @relation("CategoryCreator")
  updated_categories                       ticket_categories[]   @relation("CategoryUpdater")
  created_templates                        response_templates[]  @relation("TemplateCreator")
  updated_templates                        response_templates[]  @relation("TemplateUpdater")

  @@index([is_active])
  @@index([last_login])
  @@index([role])
  @@index([totp_enabled])
}

model response_templates {
  id                 String               @id @default(cuid())
  title              String
  content            String
  created_by         String
  updated_by         String?
  is_active          Boolean              @default(true)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  message_statistics message_statistics[]

  creator users  @relation("TemplateCreator", fields: [created_by], references: [id], onDelete: Restrict)
  updater users? @relation("TemplateUpdater", fields: [updated_by], references: [id], onDelete: SetNull)

  @@index([is_active])
  @@index([created_by])
}

model message_statistics {
  id                    String            @id @default(cuid())
  message_id            String            @unique
  agent_id              String
  ticket_id             String
  ai_suggestion_used    Boolean           @default(false)
  suggestion_action     SuggestionAction?
  suggestion_edit_ratio Float?
  original_suggestion   String?
  template_used         Boolean           @default(false)
  template_id           String?
  system_mode           SystemMode
  created_at            DateTime          @default(now())

  message  messages            @relation(fields: [message_id], references: [id], onDelete: Cascade)
  agent    users               @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  ticket   tickets             @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  template response_templates? @relation(fields: [template_id], references: [id], onDelete: SetNull)

  @@index([agent_id])
  @@index([ticket_id])
  @@index([template_id])
  @@index([created_at])
  @@index([ai_suggestion_used])
  @@index([suggestion_action])
  @@index([system_mode])
}

model knowledge_documents {
  id              String   @id @default(cuid())
  source_url      String?  @unique
  title           String
  content_hash    String   @unique
  source_type     String   @default("manual_upload")
  status          String   @default("indexed")
  chunks_count    Int      @default(0)
  total_chars     Int      @default(0)
  chroma_ids      Json?
  file_path       String?
  size            Int?
  error_message   String?
  metadata        Json?
  last_updated    DateTime @updatedAt
  created_at      DateTime @default(now())
  indexed_at      DateTime?

  @@index([source_type])
  @@index([status])
  @@index([created_at])
}

enum ActionType {
  created
  assigned
  priority_changed
  message_added
}

enum AgentStatusEnum {
  online
  busy
  offline
}

enum MessageType {
  text
  file
  system_action
  ai_response
}

enum SenderType {
  user
  agent
  system
  ai
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketSource {
  widget
  admin_panel
  email
}

enum UserRole {
  admin
  agent
  user
}

enum UserActivityType {
  auth
  user_management
  conversation
  system
  profile
  security
}

enum SuggestionAction {
  sent_as_is
  edited
  from_scratch
}

enum SystemMode {
  hitl
  autopilot
  off
}

