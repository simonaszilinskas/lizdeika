services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vilnius-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-vilnius_support}
      POSTGRES_USER: ${DB_USER:-vilnius_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - vilnius-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-vilnius_user} -d ${DB_NAME:-vilnius_support}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend Application
  backend:
    build:
      context: .
      target: production
    container_name: vilnius-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_ACCESS_EXPIRES_IN=${JWT_ACCESS_EXPIRES_IN:-15m}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - AI_PROVIDER=${AI_PROVIDER:-openrouter}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL:-google/gemini-2.5-flash}
      - FLOWISE_URL=${FLOWISE_URL}
      - FLOWISE_CHATFLOW_ID=${FLOWISE_CHATFLOW_ID}
      - FLOWISE_API_KEY=${FLOWISE_API_KEY}
      - SITE_URL=${SITE_URL}
      - SITE_NAME=${SITE_NAME:-Vilnius Assistant}
      - WIDGET_NAME=${WIDGET_NAME:-Vilnius Assistant}
      - WIDGET_PRIMARY_COLOR=${WIDGET_PRIMARY_COLOR:-#2c5530}
      - WIDGET_ALLOWED_DOMAINS=${WIDGET_ALLOWED_DOMAINS:-*}
      - RAG_K=${RAG_K:-100}
      - RAG_SHOW_SOURCES=${RAG_SHOW_SOURCES:-true}
      - ENABLE_QUERY_REPHRASING=${ENABLE_QUERY_REPHRASING:-true}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - CHROMA_URL=${CHROMA_URL}
      - CHROMA_TENANT=${CHROMA_TENANT}
      - CHROMA_DATABASE=${CHROMA_DATABASE}
      - CHROMA_AUTH_TOKEN=${CHROMA_AUTH_TOKEN}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_BASE_URL=${LANGFUSE_BASE_URL:-https://cloud.langfuse.com}
      - LANGFUSE_DEBUG=${LANGFUSE_DEBUG:-false}
      - SYSTEM_PROMPT=${SYSTEM_PROMPT}
      - ADMIN_RECOVERY_KEY=${ADMIN_RECOVERY_KEY}
      - UPLOADS_DIR=/var/uploads
    volumes:
      - uploads_prod_data:/var/uploads
    networks:
      - vilnius-internal
      - web
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: >
      sh -c "
        echo 'Starting production deployment...' &&
        echo 'Running database migrations...' &&
        npx prisma migrate deploy &&
        npx prisma generate &&
        echo 'Production server starting...' &&
        node server.js
      "

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vilnius-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./custom-widget:/usr/share/nginx/html/custom-widget:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - web
      - vilnius-internal
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Log aggregation (optional)
  logrotate:
    image: alpine:latest
    container_name: vilnius-logrotate
    restart: always
    volumes:
      - nginx_logs:/logs
    command: >
      sh -c "
        while true; do
          find /logs -name '*.log' -type f -size +100M -exec truncate -s 50M {} \;
          sleep 3600
        done
      "
    profiles:
      - with-logging

volumes:
  postgres_prod_data:
    driver: local
  uploads_prod_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  vilnius-internal:
    driver: bridge
    internal: true
  web:
    driver: bridge